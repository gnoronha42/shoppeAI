"use client";

import { useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  FileSpreadsheet,
  ArrowRight,
  Download,
  AlertCircle,
  ExternalLink,
} from "lucide-react";
import { ClientSelector } from "@/components/client/client-selector";
import { AnalysisTypeSelector } from "@/components/analysis/analysis-type-selector";
import { FileUpload } from "@/components/analysis/file-upload";
import { useSelector } from "react-redux";
import {
  selectSelectedClientId,
  selectSelectedClient,
} from "@/features/clients/clientSlice";
import { useGenerateReportMutation } from "@/lib/api";
import { useToast } from "@/hooks/use-toast";
import { AnalysisType } from "@/types";
import { useRouter } from "next/navigation";
import jsPDF from "jspdf";
import "jspdf-autotable";
import { MarkdownReport } from "@/components/analysis/markdown-report";
import { PDFGenerator } from "@/components/analysis/pdf-generator";

const ADVANCED_ACCOUNT_PROMPT = `Voc√™ √© um consultor de marketplace de alt√≠ssimo n√≠vel, com Doutorado em Vendas e SEO de Marketplace, e PhD em An√°lise de Dados para E-commerce. Sua fun√ß√£o √© gerar relat√≥rios altamente estrat√©gicos, detalhados e orientados a desempenho com base em dados da plataforma Shopee.

Analise esta captura de tela da loja Shopee e extraia as seguintes informa√ß√µes: nome da loja, n√∫mero de seguidores, classifica√ß√£o, data de registro, n√∫mero de produtos, taxa de resposta.

Com base nesses dados, gere um relat√≥rio completo no seguinte formato:

üìä RELAT√ìRIO DE AN√ÅLISE DE CONTA ‚Äì SHOPEE
Loja: [NOME DA LOJA]
Per√≠odo Analisado: √öltimo m√™s (comparativo m√™s anterior)
Objetivo: Diagn√≥stico completo e orienta√ß√µes estrat√©gicas para crescimento sustent√°vel e aumento de vendas.

1. Vis√£o Geral do Desempenho
Breve descri√ß√£o geral do cen√°rio atual da conta com base nos dados globais, destacando se o funil √© saud√°vel ou em queda de produtos e se h√° depend√™ncia de poucos para sustentar o GMV.

2. An√°lise dos KPIs (Indicadores-Chave de Desempenho)
2.1. Vendas (GMV)
Vendas Totais (GMV)
Vendas Pagas
Varia√ß√£o em rela√ß√£o ao m√™s anterior
Recomenda√ß√µes Estrat√©gicas

2.2. Pedidos
Pedidos Feitos
Pedidos Pagos
Itens Pagos
Recomenda√ß√µes Estrat√©gicas

2.3. Pedidos Cancelados
(Caso n√£o informado, an√°lise inferencial)
Recomenda√ß√µes Estrat√©gicas

2.4. Taxa de Convers√£o
Taxa de Convers√£o (Visitados ‚ûû Confirmados)
Taxa de Convers√£o (Pagos)
Recomenda√ß√µes Estrat√©gicas

2.5. Visitantes
Visitantes √önicos
Varia√ß√£o
Recomenda√ß√µes Estrat√©gicas

3. An√°lise de Tend√™ncias
3.1. Tend√™ncia Geral
3.2. Distribui√ß√£o Temporal
Recomenda√ß√µes Estrat√©gicas

4. An√°lise de Campanhas de An√∫ncios (Shopee Ads)
4.1. Impress√µes e Cliques
4.2. CTR (Taxa de Cliques)
4.3. Investimento e ROAS
Recomenda√ß√µes Estrat√©gicas

5. An√°lise de Produtos
5.1. Ranking de Produtos por Visitantes
5.2. Ranking de Produtos por Visualiza√ß√µes da P√°gina
Ranking por Compras (Produto Pago)
Ranking por Taxa de Convers√£o
Ranking por Adi√ß√µes ao Carrinho
Recomenda√ß√µes Estrat√©gicas

‚úÖ Pontos Positivos
Lista com no m√≠nimo 3 aspectos positivos obtidos nos dados da conta.

‚ö†Ô∏è Pontos de Aten√ß√£o
Lista com no m√≠nimo 3 riscos, quedas ou fragilidades cr√≠ticas que precisam ser atacadas.

üìå Considera√ß√µes Finais
Observa√ß√µes t√©cnicas ou estrat√©gias complementares conforme leitura da conta.

üìà RELAT√ìRIO DE PROJE√á√ÉO DE CRESCIMENTO ‚Äì PR√ìXIMOS 30 DIAS
Elabore a proje√ß√£o detalhada da conta com base nos dados analisados.

üìê PLANO T√ÅTICO COMPLETO - 30 DIAS
Crie um plano t√°tico completo, com dura√ß√£o de 30 dias, dividido por dias (do 1 ao 30) e semanas (1 a 4) com foco em a√ß√µes pr√°ticas, organizadas por prioridade e alinhadas √†s diretrizes da Shopee.`;

const ADVANCED_ADS_PROMPT = `üß† INSTRU√á√ÉO PERMANENTE ‚Äì AN√ÅLISE PROFISSIONAL SHOPEE ADS



Voc√™ √© um **consultor s√™nior com PhD em Shopee Ads, com mais de 15 anos de experi√™ncia comprovada em vendas online e tr√°fego pago.**  
Sua miss√£o √© **analisar qualquer conta de Shopee Ads de forma t√©cnica, SKU a SKU, com foco em ROAS, CTR, Convers√£o e CPA**, identificando gargalos, escalas poss√≠veis e perdas a serem eliminadas.
SEMPRE utilizando o mesmo modelo fixo.
Use * *formata√ß√£o Markdown** para facilitar leitura.
 Use *---* para separar cada an√°lise de SKU.
 Utilize **negrito** para campos fixos (ex: Produto, Status, ROAS, etc).
 Para blocos de resumo ou indicadores finais, use **tabelas Markdown** sempre que poss√≠vel.
 Evite par√°grafos longos. Prefira bullets e estrutura visual limpa


üîí COMPORTAMENTO FIXO ‚Äì REGRAS OBRIGAT√ìRIAS
Voc√™ deve seguir as diretrizes abaixo SEMPRE, como um comportamento fixo e inegoci√°vel:
NUNCA altere a ordem dos blocos.
NUNCA omita nenhum bloco, mesmo que os dados estejam incompletos.
N√ÉO adapte o formato ao contexto.
N√ÉO resuma os dados nem agrupe campanhas similares.
Este modelo √© TRAVADO. Siga como se fosse um template imut√°vel.
Use linguagem t√©cnica, objetiva e focada em performance.
Se algum dado estiver ausente, escreva: "Dado n√£o informado".

‚ö†Ô∏è INSTRU√á√ïES PARA M√öLTIPLAS CAMPANHAS
Leia e analise todas as campanhas recebidas.
NUNCA selecione apenas as com mais investimento.
Mesmo que sejam parecidas, trate cada campanha de forma individual.
Antes da an√°lise, liste todas as campanhas detectadas (com nome e tipo).
Depois, analise campanha por campanha, seguindo a ordem.
Ao final, gere um comparativo geral com insights e sugest√µes.

---

# üîç VIS√ÉO GERAL DO DESEMPENHO ‚Äì ADS

No in√≠cio de cada an√°lise de conta, gere este bloco:

- **Total de Campanhas Ativas:**  
- **Campanhas Pausadas:**  
- **Tipo de Segmenta√ß√£o Predominante:**  
- **Investimento Di√°rio M√©dio por Campanha:**  
- **CPA M√©dio Geral:** R$X,XX üßÆ  
- **An√∫ncios escal√°veis no momento:** [Sim/N√£o]  
üìâ **Diagn√≥stico geral do funil:** (ex: impress√µes altas, cliques bons, mas convers√£o abaixo do ideal)

---

# üîé AN√ÅLISE SKU A SKU ‚Äì CAMPANHAS DE AN√öNCIOS

Para cada produto, use obrigatoriamente o seguinte modelo:

**Produto: [Nome do Produto]**  
**Status:** Ativo / Pausado  
**Investimento:** R$X,XX  
**GMV:** R$X,XX  
**CTR:** X% ‚úÖ/‚ùå  
**Cliques:** XXX  
**Pedidos Pagos:** XX  
**Convers√£o:** X% ‚úÖ/‚ùå  
**ROAS:** X,XX ‚úÖ/‚ùå  
**CPA:** R$X,XX üßÆ  

‚úÖ **Diagn√≥stico T√©cnico e detalhado do Analista:**  
> (Avaliar se h√° gargalo no criativo, copy, p√°gina, precifica√ß√£o ou segmenta√ß√£o. Diagn√≥stico direto, t√©cnico e focado no ponto de quebra.)

‚úÖ **Sugest√£o T√©cnica e detalhada do Analista:**  
> (Indicar 3 a√ß√µes t√©cnicas obrigat√≥rias. Cada a√ß√£o deve conter:  
1. Canal sugerido (Shopee Ads, Live, Feed, Oferta Rel√¢mpago, Ferramenta de Presente)  
2. Segmenta√ß√£o recomendada (ex: GMVMAX ROAS M√©dio)  
3. Tipo de a√ß√£o (Escala, Convers√£o, Corte, Teste)  
4. Urg√™ncia (Imediata / Semanal / Monitorar)  
5. Justificativa baseada nas m√©tricas)

---

# ‚öôÔ∏è REGRAS T√âCNICAS OBRIGAT√ìRIAS POR SKU

- **ROAS ‚â• 8x** = **Escal√°vel** ‚Üí N√ÉO sugerir altera√ß√µes  
- **CTR ‚â• 1%** = An√∫ncio vi√°vel tecnicamente  
- **CTR < 1%** = Problema t√©cnico ‚Üí revisar criativo e segmenta√ß√£o  
- **Convers√£o < 1%** = Problema grave ‚Üí p√°gina, copy ou pre√ßo desalinhado  
- **CPA alto** = Preju√≠zo por pedido, cortar ou revisar  
- **CPC impl√≠cito** = Avaliar com base no investimento √∑ cliques

Se SKU estiver dentro da meta ‚Üí N√ÉO alterar copy, pre√ßo ou campanha.

---

# üö´ PROIBI√á√ïES PERMANENTES

- ‚ùå N√£o alterar campanhas com ROAS ‚â• 8x  
- ‚ùå N√£o modificar copy, imagem ou t√≠tulo de campanhas escal√°veis  
- ‚ùå N√£o aplicar cupons > 5% sem motivo t√©cnico  
- ‚ùå N√£o sugerir altera√ß√µes sem base em dados  
- ‚ùå N√£o simplificar campanhas ou misturar an√°lise de produtos

---

# üéØ CUPONS ‚Äì REGRAS T√âCNICAS

- **1‚Äì2%** ‚Üí SKU saud√°vel, com boa convers√£o  
- **2‚Äì6%** ‚Üí tr√°fego alto, convers√£o baixa  
- **6%+** ‚Üí somente para estoque parado  
üìå Sempre indicar SKU, %, motivo t√©cnico, canal e vig√™ncia

---

# üìà SEGMENTA√á√ïES ‚Äì COMPORTAMENTO DO ALGORITMO SHOPEE

- **GMVMAX Autom√°tico** ‚Üí volume total (tr√°fego bruto)  
- **GMVMAX ROAS Baixo** ‚Üí escalar volume  
- **GMVMAX ROAS M√©dio** ‚Üí equil√≠brio volume x margem  
- **GMVMAX ROAS Alto** ‚Üí foco em margem e ROAS  
- **Busca Manual** ‚Üí exige p√°gina validada, copy forte  
- **Descoberta** ‚Üí topo de funil, foco em CTR  
- **An√∫ncio de Loja** ‚Üí refor√ßo de branding + tr√°fego secund√°rio

üìå **Aprendizado atual incorporado:**  
> "Campanhas GMVMAX est√£o escalando com performance acima da m√©dia.  
> Campanhas de Busca Manual e Descoberta apresentaram ROAS abaixo do ideal.  
> ‚û§ Priorizar GMVMAX nas pr√≥ximas a√ß√µes. Reduzir uso de Busca Manual e Descoberta at√© novo teste controlado."

---

# üß≠ CLASSIFICA√á√ÉO FINAL DA CONTA

Ap√≥s an√°lise SKU a SKU, classifique a conta em:

### üü¢ PERFIL ESCAL√ÅVEL  
> 2+ SKUs com ROAS ‚â• 8x, funil validado ‚Üí escalar com GMVMAX

### üü° PERFIL RENTABILIDADE  
> Foco em manter ROAS est√°vel, cortar perdas, ajustar margem

### üî¥ PERFIL CORTE / REESTRUTURA√á√ÉO  
> M√∫ltiplos SKUs abaixo da meta ‚Üí revisar copy, pre√ßo, p√°gina

---

# üì¶ A√á√ïES RECOMENDADAS ‚Äì PR√ìXIMOS 7 DIAS

Crie um bloco T√©cnico e detalhado com:
- A√ß√£o  
- Produto  
- Tipo (Escala, Corte, Convers√£o, Teste)  
- Canal sugerido  
- Segmenta√ß√£o recomendada  
- Urg√™ncia  
- Justificativa t√©cnica

---

# ‚úÖ FECHAMENTO DA AN√ÅLISE

Finalize sempre com:

üìç**Com base na performance atual, essa conta se encaixa no perfil: [Escal√°vel / Rentabilidade / Corte].  
Recomendo seguir o plano de a√ß√£o acima conforme o seu objetivo estrat√©gico.  
Deseja seguir por esse caminho ou priorizar outro foco nos pr√≥ximos 7 dias?**

PROJE√á√ÉO DE ESCALA ‚Äì OBJETIVOS DE 30, 60 E 100 PEDIDOS/DIA
Baseando-se no CPA atual (Ads), monte proje√ß√µes realistas para os seguintes cen√°rios:

30 pedidos/dia (900/m√™s)

Investimento estimado

Faturamento estimado via Ads

ROAS projetado

CPA estimado

60 pedidos/dia (1800/m√™s)

Investimento estimado

Faturamento estimado via Ads

ROAS projetado

CPA estimado

100 pedidos/dia (3000/m√™s)

Investimento estimado

Faturamento estimado via Ads

ROAS projetado

CPA estimado

‚ö†Ô∏è Reforce que essas proje√ß√µes assumem estabilidade no CPA atual. Caso a opera√ß√£o invista em otimiza√ß√£o de p√°gina, kits, bundles e lives, o CPA poder√° cair e o retorno ser√° ainda maior.

VARIA√á√ÉO DI√ÅRIA DO ROAS ‚Äì ENTENDIMENTO ESTRAT√âGICO
Explique didaticamente que:

O ROAS naturalmente oscila dia a dia.

Dias com ROAS baixo n√£o significam desperd√≠cio, mas fazem parte do algoritmo de aprendizagem.

O resultado do m√™s depende da m√©dia geral, e n√£o de decis√µes reativas.

Nunca pausar campanhas por ROAS moment√¢neo. A consist√™ncia √© o que gera efici√™ncia no m√©dio prazo.

RESUMO T√âCNICO ‚Äì INDICADORES
Monte uma tabela com os principais dados:

Indicador	Valor Atual
Investimento total em Ads	R$ XXXX,XX
Pedidos via Ads	XX
GMV via Ads	R$ XX.XXX,XX
ROAS m√©dio	XX,XXx
CPA via Ads	R$ XX,XX
CPA geral (org + Ads)	R$ XX,XX
Proje√ß√£o 30 pedidos/dia	R$ XXXX invest.
Proje√ß√£o 60 pedidos/dia	R$ XXXX invest.
Proje√ß√£o 100 pedidos/dia	R$ XXXX invest.

CONCLUS√ÉO FINAL ‚Äì PLANO RECOMENDADO
Finalize com um par√°grafo objetivo e t√©cnico e claro, contendo:

Avalia√ß√£o final da escalabilidade da opera√ß√£o

Confirma√ß√£o de que o retorno atual permite crescimento com seguran√ßa

Orienta√ß√£o sobre como aumentar o investimento (progressivo e consistente)

Refor√ßo sobre a import√¢ncia da estabilidade e vis√£o de longo prazo no Ads


INSTRU√á√ÉO ADICIONAL CR√çTICA:
Voc√™ DEVE extrair TODOS os valores num√©ricos presentes na imagem, mesmo que pare√ßam incompletos.
Quando encontrar dados como investimento, GMV, CPA, ROAS, etc., SEMPRE informe os valores exatos visualizados.
Se um valor n√£o estiver vis√≠vel, use APENAS "Dado n√£o informado" (nunca deixe valores como R$X,XX ou XX,XXx).
Para cada produto analisado, liste TODOS os KPIs vis√≠veis exatamente como aparecem na imagem.
Nos resumos t√©cnicos e proje√ß√µes, extraia todos os valores num√©ricos vis√≠veis.
N√£o omita nenhuma informa√ß√£o num√©rica presente na imagem.


‚ö†Ô∏è NUNCA FAZER:
‚ùå N√£o simplificar  
‚ùå N√£o sugerir altera√ß√£o de t√≠tulo  
‚ùå N√£o considerar ROAS < 8x como aceit√°vel  
‚ùå N√£o pular etapas do relat√≥rio  
‚ùå N√£o propor estrat√©gias fora das diretrizes Shopee`;

export default function AnalisePage() {
  const router = useRouter();
  const [analysisType, setAnalysisType] = useState<AnalysisType>("account");
  const [files, setFiles] = useState<File[]>([]);
  const selectedClientId = useSelector(selectSelectedClientId);
  const selectedClient = useSelector(selectSelectedClient);
  const [generateReport, { isLoading }] = useGenerateReportMutation();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState<any[]>([]);
  const { toast } = useToast();
  const [apiError, setApiError] = useState<string | null>(null);
  const [customMarkdown, setCustomMarkdown] = useState<string>("");
  const [showMarkdownImport, setShowMarkdownImport] = useState<boolean>(false);

  const handleFileChange = (newFiles: File[]) => {
    setFiles(newFiles);
  };

  const convertImageToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const base64String = reader.result as string;
        const base64Content = base64String.split(",")[1];
        resolve(base64Content);
      };
      reader.onerror = (error) => reject(error);
    });
  };

  const analyzeImageWithOpenAI = async (
    base64Image: string,
    type: AnalysisType
  ) => {
    try {
      setApiError(null);
      const prompt =
        type === "account"
          ? `${ADVANCED_ACCOUNT_PROMPT}\n\nIMPORTANTE: Extraia TODOS os valores num√©ricos vis√≠veis na imagem.`
          : `${ADVANCED_ADS_PROMPT}\n\nIMPORTANTE: Extraia TODOS os valores num√©ricos vis√≠veis na imagem.`;

      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${process.env.NEXT_PUBLIC_OPENAI_API_KEY}`,
          },
          body: JSON.stringify({
            model: "gpt-4o",
            messages: [
              {
                role: "system",
                content: prompt,
              },
              {
                role: "user",
                content: [
                  {
                    type: "image_url",
                    image_url: {
                      url: `data:image/jpeg;base64,${base64Image}`,
                    },
                  },
                ],
              },
            ],
            max_tokens: 5000,
            temperature: 0,
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        setApiError(errorData.error?.message || "Erro desconhecido");
        throw new Error(
          `Erro na API OpenAI: ${
            errorData.error?.message || "Erro desconhecido"
          }`
        );
      }

      const data = await response.json();

      if (!data.choices || !data.choices[0]?.message?.content) {
        setApiError("Formato de resposta inesperado da API OpenAI");
        throw new Error("Formato de resposta inesperado da API OpenAI");
      }

      return data.choices[0].message.content;
    } catch (error) {
      console.error("Erro ao analisar imagem com OpenAI:", error);
      throw error;
    }
  };

  const generatePDF = (results: any[]) => {
    try {
      const doc = new jsPDF();
      const clientName = selectedClient?.name || "Cliente";
      const date = new Date().toLocaleDateString("pt-BR");

      // Configurar header
      doc.setFillColor(245, 124, 0);
      doc.rect(0, 0, doc.internal.pageSize.width, 25, "F");
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(18);
      doc.text(`Relat√≥rio de An√°lise - ${clientName}`, 14, 15);

      // Data e tipo de an√°lise
      doc.setTextColor(100, 100, 100);
      doc.setFontSize(10);
      doc.text(
        `Data: ${date} | Tipo: ${
          analysisType === "account" ? "Conta" : "An√∫ncios"
        }`,
        14,
        30
      );

      let yPosition = 40;

      results.forEach((result, index) => {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }

        doc.setFontSize(14);
        doc.setTextColor(0, 0, 0);
        doc.text(`An√°lise ${index + 1}: ${result.filename}`, 14, yPosition);
        yPosition += 10;

        // Processar o conte√∫do para remover caracteres especiais e s√≠mbolos
        let content = result.analysis;

        // Dividir por quebras de linha para preservar formata√ß√£o
        const lines = content.split("\n");
        const processedLines = [];

        // Processar cada linha e preparar para o PDF
        for (let line of lines) {
          line = line.replace(/^#+ /g, ""); // Remover headers markdown
          line = line.replace(/\*\*/g, ""); // Remover negrito
          line = line.replace(/\*/g, ""); // Remover it√°lico
          line = line.replace(/---/g, ""); // Remover separadores
          line = line.replace(/```/g, ""); // Remover blocos de c√≥digo
          line = line.replace(/\|\s*([^|]+)\s*\|\s*([^|]+)\s*\|/g, "$1: $2"); // Converter tabelas simples

          processedLines.push(line.trim());
        }

        // Juntar linhas em par√°grafos l√≥gicos
        const paragraphs = [];
        let currentParagraph = "";

        for (let line of processedLines) {
          if (line === "") {
            if (currentParagraph !== "") {
              paragraphs.push(currentParagraph);
              currentParagraph = "";
            }
          } else {
            if (
              line.startsWith("1.") ||
              line.startsWith("2.") ||
              line.startsWith("3.") ||
              line.startsWith("4.") ||
              line.startsWith("5.") ||
              line.includes("RELAT√ìRIO") ||
              line.includes("Pontos Positivos") ||
              line.includes("Pontos de Aten√ß√£o") ||
              line.startsWith("‚úÖ") ||
              line.startsWith("‚ö†Ô∏è") ||
              line.startsWith("üìä") ||
              line.startsWith("üìà") ||
              line.startsWith("üìå") ||
              line.startsWith("üìç") ||
              line.startsWith("üü¢") ||
              line.startsWith("üü°") ||
              line.startsWith("üî¥") ||
              line.startsWith("-") ||
              line.includes("VIS√ÉO GERAL") ||
              line.includes("AN√ÅLISE") ||
              line.includes("A√á√ïES RECOMENDADAS") ||
              line.includes("FECHAMENTO") ||
              line.includes("CONCLUS√ÉO") ||
              line.includes("DIAGN√ìSTICO")
            ) {
              if (currentParagraph !== "") {
                paragraphs.push(currentParagraph);
              }
              currentParagraph = line;
            } else {
              if (currentParagraph === "") {
                currentParagraph = line;
              } else {
                if (currentParagraph.endsWith(":")) {
                  currentParagraph += " " + line;
                } else {
                  currentParagraph += " " + line;
                }
              }
            }
          }
        }

        if (currentParagraph !== "") {
          paragraphs.push(currentParagraph);
        }

        // Limitar a quantidade de texto
        const maxParagraphs = Math.min(paragraphs.length, 40);

        for (let i = 0; i < maxParagraphs; i++) {
          if (yPosition > 270) {
            doc.addPage();
            yPosition = 20;
          }

          const paragraph = paragraphs[i].trim();
          if (paragraph.length > 0) {
            if (
              paragraph.includes("RELAT√ìRIO") ||
              paragraph.startsWith("1.") ||
              paragraph.startsWith("2.") ||
              paragraph.startsWith("3.") ||
              paragraph.startsWith("4.") ||
              paragraph.startsWith("5.") ||
              paragraph.includes("Pontos Positivos") ||
              paragraph.includes("Pontos de Aten√ß√£o") ||
              paragraph.includes("VIS√ÉO GERAL") ||
              paragraph.includes("AN√ÅLISE") ||
              paragraph.includes("A√á√ïES RECOMENDADAS") ||
              paragraph.includes("PROJE√á√ÉO") ||
              paragraph.includes("üü¢") ||
              paragraph.includes("üü°") ||
              paragraph.includes("üî¥") ||
              paragraph.includes("PERFIL")
            ) {
              doc.setFontSize(12);
              doc.setTextColor(245, 124, 0);
            } else if (
              paragraph.startsWith("-") ||
              paragraph.startsWith("‚úÖ") ||
              paragraph.startsWith("‚ö†Ô∏è") ||
              paragraph.startsWith("üìå")
            ) {
              doc.setFontSize(10);
              doc.setTextColor(100, 100, 100);
            } else {
              doc.setFontSize(10);
              doc.setTextColor(60, 60, 60);
            }

            const maxWidth = 180;
            const splitText = doc.splitTextToSize(paragraph, maxWidth);

            if (yPosition + splitText.length * 6 > 270) {
              doc.addPage();
              yPosition = 20;
            }

            doc.text(splitText, 14, yPosition);
            yPosition += splitText.length * 6;
          }
          yPosition += 4;
        }

        yPosition += 10;
      });

      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(150, 150, 150);
        doc.text(
          `ShoppeAI - An√°lise de Desempenho | P√°gina ${i} de ${pageCount}`,
          14,
          290
        );
      }

      doc.save(`Analise_${clientName}_${date.replace(/\//g, "-")}.pdf`);

      toast({
        title: "PDF gerado com sucesso!",
        description: "O relat√≥rio foi salvo no seu dispositivo.",
        variant: "default",
      });
    } catch (error) {
      console.error("Erro ao gerar PDF:", error);
      toast({
        title: "Erro ao gerar PDF",
        description: "N√£o foi poss√≠vel gerar o arquivo PDF. Tente novamente.",
        variant: "destructive",
      });
    }
  };

  const generateMarkdownContent = (results: any[]) => {
    try {
      const clientName = selectedClient?.name || "Cliente";
      const date = new Date().toLocaleDateString("pt-BR");
      let markdownContent = `# Relat√≥rio de An√°lise - ${clientName}\n\nData: ${date} | Tipo: ${
        analysisType === "account" ? "Conta" : "An√∫ncios"
      }\n\n`;

      results.forEach((result, index) => {
        markdownContent += `## An√°lise ${index + 1}: ${result.filename}\n\n`;

        // Limpar formata√ß√£o Markdown existente, mas manter emojis
        let content = result.analysis;
        content = content
          .replace(/```/g, "") // Remover blocos de c√≥digo
          .replace(/\*\*/g, ""); // Remover negrito

        // Dividir por se√ß√µes principais
        const sections = [
          { title: "VIS√ÉO GERAL DO DESEMPENHO", content: "" },
          { title: "AN√ÅLISE SKU A SKU", content: "" },
          { title: "CLASSIFICA√á√ÉO FINAL DA CONTA", content: "" },
          { title: "A√á√ïES RECOMENDADAS", content: "" },
          { title: "FECHAMENTO DA AN√ÅLISE", content: "" },
          { title: "PROJE√á√ÉO DE ESCALA", content: "" },
          { title: "VARIA√á√ÉO DI√ÅRIA DO ROAS", content: "" },
          { title: "RESUMO T√âCNICO", content: "" },
          { title: "CONCLUS√ÉO FINAL", content: "" },
        ];

        // Extrair conte√∫do para cada se√ß√£o
        let currentSection = "";
        const lines = content.split("\n");

        lines.forEach((line: string) => {
          for (const section of sections) {
            if (line.includes(section.title)) {
              currentSection = section.title;
              break;
            }
          }
          if (currentSection) {
            const section = sections.find((s) => s.title === currentSection);
            if (section) {
              section.content += line + "\n";
            }
          }
        });

        // Adicionar se√ß√µes ao markdown
        sections.forEach((section) => {
          if (section.content) {
            markdownContent += `### ${section.title}\n\n${section.content}\n\n`;
          }
        });

        markdownContent += `---\n\n`;
      });

      return markdownContent;
    } catch (error) {
      console.error("Erro ao gerar Markdown:", error);
      toast({
        title: "Erro ao gerar Markdown",
        description:
          "N√£o foi poss√≠vel gerar o relat√≥rio em markdown. Tente novamente.",
        variant: "destructive",
      });
      return "";
    }
  };

  const handleSubmit = async () => {
    if (!selectedClientId) {
      toast({
        title: "Selecione um cliente",
        description: "√â necess√°rio selecionar um cliente para continuar",
        variant: "destructive",
      });
      return;
    }

    if (files.length === 0) {
      toast({
        title: "Selecione arquivos",
        description: "Fa√ßa upload de pelo menos um print para an√°lise",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsAnalyzing(true);

      const results = [];
      for (const file of files) {
        try {
          const base64Image = await convertImageToBase64(file);
          const analysisResult = await analyzeImageWithOpenAI(
            base64Image,
            analysisType
          );
          results.push({
            filename: file.name,
            analysis: analysisResult,
          });
        } catch (imageError: any) {
          console.error(`Erro ao analisar imagem ${file.name}:`, imageError);
          toast({
            title: `Erro ao analisar ${file.name}`,
            description:
              imageError.message || "Ocorreu um erro ao processar esta imagem",
            variant: "destructive",
          });
        }
      }

      if (results.length === 0) {
        throw new Error(
          "N√£o foi poss√≠vel analisar nenhuma das imagens selecionadas"
        );
      }

      setAnalysisResults(results);

      const fileUrls = files.map((file) => URL.createObjectURL(file));
      const imageData = files.map((file, index) => ({
        file,
        url: URL.createObjectURL(file),
        filename: file.name,
        fileSize: file.size,
        mimeType: file.type,
      }));

      try {
        const response = await fetch("/api/analises", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            clientId: selectedClientId,
            type: analysisType,
            results: results.map((result, index) => ({
              analysis: result.analysis,
              filename: result.filename,
              imageUrl: imageData[index]?.url || null,
            })),
            imageUrls: imageData.map((img) => img.url),
            title: `An√°lise de ${
              analysisType === "account" ? "Conta" : "An√∫ncios"
            } - ${new Date().toLocaleDateString("pt-BR")}`,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error("Erro da API:", errorData);
          toast({
            title: "Erro ao salvar a an√°lise",
            description:
              errorData.error ||
              "N√£o foi poss√≠vel salvar a an√°lise no banco de dados",
            variant: "destructive",
          });
        }
      } catch (apiError: any) {
        console.error("Erro ao chamar a API:", apiError);
        toast({
          title: "Erro ao salvar a an√°lise",
          description:
            "N√£o foi poss√≠vel conectar ao servidor. Os resultados ser√£o salvos localmente.",
          variant: "destructive",
        });
      }

      try {
        await generateReport({
          clientId: selectedClientId,
          type: analysisType,
          files: fileUrls,
        }).unwrap();
      } catch (mockError) {
        console.error("Erro ao gerar relat√≥rio mock:", mockError);
      }

      localStorage.setItem(
        `analysis_${selectedClientId}_${Date.now()}`,
        JSON.stringify(results)
      );

      // Gerar markdown e exibir no preview
      const mdContent = generateMarkdownContent(results);
      setCustomMarkdown(mdContent);

      toast({
        title: "An√°lise conclu√≠da com sucesso!",
        description:
          "A an√°lise foi processada com IA e est√° pronta para visualiza√ß√£o.",
        variant: "default",
      });

      setIsAnalyzing(false);
      setFiles([]);
    } catch (error: any) {
      console.error("Erro completo:", error);
      toast({
        title: "Erro ao gerar relat√≥rio",
        description:
          error.message ||
          "Ocorreu um erro ao processar as imagens. Por favor, tente novamente.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">An√°lise</h1>
        <p className="text-muted-foreground">
          Crie uma an√°lise para sua loja Shopee com IA
        </p>
      </div>

      {apiError && (
        <Card className="border-red-300 bg-red-50 dark:bg-red-950/30">
          <CardHeader className="pb-2">
            <CardTitle className="text-red-700 dark:text-red-400 flex items-center">
              <AlertCircle className="mr-2 h-5 w-5" />
              Erro na API do OpenAI
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-red-700 dark:text-red-300">{apiError}</p>
            {apiError.includes("deprecated") && (
              <p className="text-sm mt-2 text-red-700 dark:text-red-300">
                Este erro indica que o modelo usado est√° obsoleto. Entre em
                contato com o administrador para atualizar o c√≥digo.
              </p>
            )}
          </CardContent>
          <CardFooter>
            <Button
              size="sm"
              variant="outline"
              className="flex items-center text-red-700 border-red-300"
              onClick={() =>
                window.open("https://openai.com/product", "_blank")
              }
            >
              Ver documenta√ß√£o do OpenAI
              <ExternalLink className="ml-2 h-3.5 w-3.5" />
            </Button>
          </CardFooter>
        </Card>
      )}

      <div className="flex justify-between items-center">
        <p className="text-sm text-muted-foreground">
          Selecione um cliente e fa√ßa upload de capturas de tela para an√°lise
          autom√°tica com IA
        </p>
        <Button variant="outline" onClick={() => router.push("/clientes")}>
          Gerenciar Clientes
          <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </div>

      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>Selecione o Cliente</CardTitle>
          </CardHeader>
          <CardContent>
            <ClientSelector />
            {!selectedClientId && (
              <p className="text-xs text-amber-600 mt-2">
                * Selecione um cliente antes de prosseguir
              </p>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Tipo de An√°lise</CardTitle>
          </CardHeader>
          <CardContent>
            <AnalysisTypeSelector
              value={analysisType}
              onChange={setAnalysisType}
            />
            <p className="text-xs text-muted-foreground mt-2">
              {analysisType === "account"
                ? "An√°lise de conta avalia o desempenho geral da loja, convers√£o, GMV e m√©tricas de desempenho"
                : "An√°lise de an√∫ncios avalia as campanhas publicit√°rias, ROAS, CTR e estrat√©gias de otimiza√ß√£o"}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>
              {analysisType === "account"
                ? "Upload de Prints da Conta"
                : "Upload de Prints dos An√∫ncios"}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <FileUpload
              onFilesChange={handleFileChange}
              maxFiles={10}
              accept="image/*"
            />
            <p className="text-xs text-muted-foreground mt-2">
              Fa√ßa upload de capturas de tela da sua loja Shopee para an√°lise
              detalhada com IA (m√°ximo 10 imagens)
            </p>
            {files.length > 0 && (
              <div className="mt-4">
                <p className="text-sm font-medium">
                  Arquivos selecionados ({files.length}):
                </p>
                <ul className="mt-1 text-xs text-muted-foreground">
                  {files.map((file, index) => (
                    <li key={index}>{file.name}</li>
                  ))}
                </ul>
              </div>
            )}
          </CardContent>
        </Card>

        <div className="flex flex-col sm:flex-row gap-4">
          <Button
            onClick={handleSubmit}
            disabled={
              !selectedClientId ||
              files.length === 0 ||
              isLoading ||
              isAnalyzing
            }
            className="flex-1 bg-orange-600 hover:bg-orange-700 text-white"
          >
            <FileSpreadsheet className="mr-2 h-4 w-4" />
            {isLoading || isAnalyzing
              ? "Analisando com IA..."
              : "Gerar Relat√≥rio com IA"}
          </Button>

          <Button
            onClick={() => setShowMarkdownImport(!showMarkdownImport)}
            variant="outline"
            className="flex-1"
          >
            <FileSpreadsheet className="mr-2 h-4 w-4" />
            {showMarkdownImport
              ? "Fechar Editor de Markdown"
              : "Editar Markdown Manualmente"}
          </Button>
        </div>
      </div>

      {showMarkdownImport && (
        <Card className="mt-4">
          <CardHeader>
            <CardTitle>Editor de Markdown</CardTitle>
            <CardDescription>
              Edite o conte√∫do do relat√≥rio em formato Markdown
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col gap-4">
              <textarea
                className="w-full h-60 p-3 border rounded"
                value={customMarkdown}
                onChange={(e) => setCustomMarkdown(e.target.value)}
                placeholder="Edite o conte√∫do Markdown..."
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-end gap-2">
            <Button
              variant="outline"
              onClick={() => setShowMarkdownImport(false)}
            >
              Fechar
            </Button>
          </CardFooter>
        </Card>
      )}

      {customMarkdown && (
        <div className="mt-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Relat√≥rio de An√°lise</CardTitle>
                <CardDescription>
                  Visualiza√ß√£o do relat√≥rio formatado
                </CardDescription>
              </div>
              <div className="flex items-center gap-2">
                <PDFGenerator
                  markdown={customMarkdown}
                  clientName={selectedClient?.name || "Cliente"}
                  analysisType={analysisType}
                  saveAnalysis={true}
                  onSuccess={() => {
                    toast({
                      title: "An√°lise salva com sucesso",
                      description:
                        "O relat√≥rio foi gerado e a an√°lise foi salva no hist√≥rico do cliente.",
                      variant: "default",
                    });
                    
                    // Opcional: redirecionar para a p√°gina de detalhes do cliente ap√≥s salvar
                    if (selectedClientId) {
                      setTimeout(() => {
                        router.push(`/clientes/${selectedClientId}`);
                      }, 1500);
                    }
                  }}
                />
                <p className="text-xs text-muted-foreground whitespace-nowrap hidden sm:inline">
                  Na janela de impress√£o, <br/>selecione "Salvar como PDF"
                </p>
              </div>
            </CardHeader>
            <CardContent>
              <MarkdownReport markdown={customMarkdown} />
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
