"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardFooter, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FileSpreadsheet, ArrowRight, Download, AlertCircle, ExternalLink } from "lucide-react";
import { ClientSelector } from "@/components/client/client-selector";
import { AnalysisTypeSelector } from "@/components/analysis/analysis-type-selector";
import { FileUpload } from "@/components/analysis/file-upload";
import { useSelector } from "react-redux";
import { selectSelectedClientId, selectSelectedClient } from "@/features/clients/clientSlice";
import { useGenerateReportMutation } from "@/lib/api";
import { useToast } from "@/hooks/use-toast";
import { AnalysisType } from "@/types";
import { useRouter } from "next/navigation";
import jsPDF from "jspdf";
import 'jspdf-autotable';

const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY;

const ADVANCED_ACCOUNT_PROMPT = `Voc√™ √© um consultor de marketplace de alt√≠ssimo n√≠vel, com Doutorado em Vendas e SEO de Marketplace, e PhD em An√°lise de Dados para E-commerce. Sua fun√ß√£o √© gerar relat√≥rios altamente estrat√©gicos, detalhados e orientados a desempenho com base em dados da plataforma Shopee.

Analise esta captura de tela da loja Shopee e extraia as seguintes informa√ß√µes: nome da loja, n√∫mero de seguidores, classifica√ß√£o, data de registro, n√∫mero de produtos, taxa de resposta.

Com base nesses dados, gere um relat√≥rio completo no seguinte formato:

üìä RELAT√ìRIO DE AN√ÅLISE DE CONTA ‚Äì SHOPEE
Loja: [NOME DA LOJA]
Per√≠odo Analisado: √öltimo m√™s (comparativo m√™s anterior)
Objetivo: Diagn√≥stico completo e orienta√ß√µes estrat√©gicas para crescimento sustent√°vel e aumento de vendas.

1. Vis√£o Geral do Desempenho
Breve descri√ß√£o geral do cen√°rio atual da conta com base nos dados globais, destacando se o funil √© saud√°vel ou em queda de produtos e se h√° depend√™ncia de poucos para sustentar o GMV.

2. An√°lise dos KPIs (Indicadores-Chave de Desempenho)
2.1. Vendas (GMV)
Vendas Totais (GMV)
Vendas Pagas
Varia√ß√£o em rela√ß√£o ao m√™s anterior
Recomenda√ß√µes Estrat√©gicas

2.2. Pedidos
Pedidos Feitos
Pedidos Pagos
Itens Pagos
Recomenda√ß√µes Estrat√©gicas

2.3. Pedidos Cancelados
(Caso n√£o informado, an√°lise inferencial)
Recomenda√ß√µes Estrat√©gicas

2.4. Taxa de Convers√£o
Taxa de Convers√£o (Visitados ‚ûû Confirmados)
Taxa de Convers√£o (Pagos)
Recomenda√ß√µes Estrat√©gicas

2.5. Visitantes
Visitantes √önicos
Varia√ß√£o
Recomenda√ß√µes Estrat√©gicas

3. An√°lise de Tend√™ncias
3.1. Tend√™ncia Geral
3.2. Distribui√ß√£o Temporal
Recomenda√ß√µes Estrat√©gicas

4. An√°lise de Campanhas de An√∫ncios (Shopee Ads)
4.1. Impress√µes e Cliques
4.2. CTR (Taxa de Cliques)
4.3. Investimento e ROAS
Recomenda√ß√µes Estrat√©gicas

5. An√°lise de Produtos
5.1. Ranking de Produtos por Visitantes
5.2. Ranking de Produtos por Visualiza√ß√µes da P√°gina
Ranking por Compras (Produto Pago)
Ranking por Taxa de Convers√£o
Ranking por Adi√ß√µes ao Carrinho
Recomenda√ß√µes Estrat√©gicas

‚úÖ Pontos Positivos
Lista com no m√≠nimo 3 aspectos positivos obtidos nos dados da conta.

‚ö†Ô∏è Pontos de Aten√ß√£o
Lista com no m√≠nimo 3 riscos, quedas ou fragilidades cr√≠ticas que precisam ser atacadas.

üìå Considera√ß√µes Finais
Observa√ß√µes t√©cnicas ou estrat√©gias complementares conforme leitura da conta.

üìà RELAT√ìRIO DE PROJE√á√ÉO DE CRESCIMENTO ‚Äì PR√ìXIMOS 30 DIAS
Elabore a proje√ß√£o detalhada da conta com base nos dados analisados.

üìê PLANO T√ÅTICO COMPLETO - 30 DIAS
Crie um plano t√°tico completo, com dura√ß√£o de 30 dias, dividido por dias (do 1 ao 30) e semanas (1 a 4) com foco em a√ß√µes pr√°ticas, organizadas por prioridade e alinhadas √†s diretrizes da Shopee.`;


const ADVANCED_ADS_PROMPT = `Voc√™ √© um consultor de marketplace especializado em an√∫ncios para e-commerce, com vasta experi√™ncia em otimiza√ß√£o de campanhas na Shopee.

Analise esta captura de tela de an√∫ncios da Shopee e extraia as seguintes informa√ß√µes: nome do produto, pre√ßo, taxa de convers√£o, n√∫mero de visualiza√ß√µes, n√∫mero de cliques.

Com base nesses dados, forne√ßa uma an√°lise detalhada dos an√∫ncios incluindo:

1. Desempenho Geral
- An√°lise do ROAS (Retorno sobre Investimento em An√∫ncios)
- CTR (Taxa de Cliques) comparada ao benchmark da plataforma
- Convers√£o dos an√∫ncios para vendas

2. Otimiza√ß√£o de Campanhas
- Recomenda√ß√µes para ajustes de lance
- Estrat√©gia de palavras-chave
- Melhorias na segmenta√ß√£o

3. Formatos de An√∫ncios Recomendados
- An√∫ncios de Descoberta
- An√∫ncio de Busca
- An√∫ncio de Busca de Loja
- An√∫ncio GMVMAX Lance Autom√°tico
- An√∫ncio GMVMAX Meta de ROAS

4. Plano de A√ß√£o para 30 dias
- Semana 1: A√ß√µes imediatas
- Semana 2: Otimiza√ß√µes de meio per√≠odo
- Semana 3-4: Estrat√©gia de escala

5. Proje√ß√£o de Resultados
- Cen√°rio conservador
- Cen√°rio realista
- Cen√°rio agressivo

Inclua m√©tricas objetivas e recomenda√ß√µes pr√°ticas que possam ser implementadas imediatamente.`;

export default function AnalisePage() {
  const router = useRouter();
  const [analysisType, setAnalysisType] = useState<AnalysisType>("account");
  const [files, setFiles] = useState<File[]>([]);
  const selectedClientId = useSelector(selectSelectedClientId);
  const selectedClient = useSelector(selectSelectedClient);
  const [generateReport, { isLoading }] = useGenerateReportMutation();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState<any[]>([]);
  const { toast } = useToast();
  const [apiError, setApiError] = useState<string | null>(null);

  const handleFileChange = (newFiles: File[]) => {
    setFiles(newFiles);
  };

  const convertImageToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const base64String = reader.result as string;
        const base64Content = base64String.split(",")[1];
        resolve(base64Content);
      };
      reader.onerror = (error) => reject(error);
    });
  };

  const analyzeImageWithGemini = async (
    base64Image: string,
    type: AnalysisType
  ) => {
    try {
      setApiError(null);
      const prompt = type === "account" ? ADVANCED_ACCOUNT_PROMPT : ADVANCED_ADS_PROMPT;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  { text: prompt },
                  {
                    inline_data: {
                      mime_type: "image/jpeg",
                      data: base64Image,
                    },
                  },
                ],
              },
            ],
            generation_config: {
              temperature: 0.4,
              max_output_tokens: 4096,
            },
            safety_settings: [
              {
                category: "HARM_CATEGORY_HARASSMENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                category: "HARM_CATEGORY_HATE_SPEECH",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              }
            ]
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Erro da API Gemini:", errorData);
        const errorMessage = errorData.error?.message || 'Erro desconhecido';
        setApiError(errorMessage);
        throw new Error(`Erro na API Gemini: ${errorMessage}`);
      }

      const data = await response.json();
      
      if (!data.candidates || !data.candidates[0]?.content?.parts?.[0]?.text) {
        console.error("Resposta inesperada da API Gemini:", data);
        setApiError("Formato de resposta inesperado da API Gemini");
        throw new Error("Formato de resposta inesperado da API Gemini");
      }
      
      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      console.error("Erro ao analisar imagem com Gemini:", error);
      throw error;
    }
  };

  const generatePDF = (results: any[]) => {
    try {
      const doc = new jsPDF();
      const clientName = selectedClient?.name || "Cliente";
      const date = new Date().toLocaleDateString('pt-BR');
      
      // Configurar header
      doc.setFillColor(245, 124, 0); // Cor laranja da Shopee
      doc.rect(0, 0, doc.internal.pageSize.width, 25, 'F');
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(18);
      doc.text(`Relat√≥rio de An√°lise - ${clientName}`, 14, 15);
      
      // Data e tipo de an√°lise
      doc.setTextColor(100, 100, 100);
      doc.setFontSize(10);
      doc.text(`Data: ${date} | Tipo: ${analysisType === 'account' ? 'Conta' : 'An√∫ncios'}`, 14, 30);
      
      let yPosition = 40;
      
      // Para cada resultado de an√°lise
      results.forEach((result, index) => {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }
        
        doc.setFontSize(14);
        doc.setTextColor(0, 0, 0);
        doc.text(`An√°lise ${index + 1}: ${result.filename}`, 14, yPosition);
        yPosition += 10;
        
        // Processar o conte√∫do da an√°lise em par√°grafos
        const content = result.analysis;
        const paragraphs = content.split('\n\n');
        
        // Limitar a quantidade de texto
        const maxParagraphs = Math.min(paragraphs.length, 20);
        
        for (let i = 0; i < maxParagraphs; i++) {
          if (yPosition > 270) {
            doc.addPage();
            yPosition = 20;
          }
          
          const paragraph = paragraphs[i].trim();
          if (paragraph.length > 0) {
            // Verificar se √© um t√≠tulo
            if (paragraph.includes('RELAT√ìRIO') || 
                paragraph.startsWith('1.') || 
                paragraph.startsWith('2.') || 
                paragraph.startsWith('3.') || 
                paragraph.startsWith('4.') || 
                paragraph.startsWith('5.') ||
                paragraph.includes('Pontos Positivos') ||
                paragraph.includes('Pontos de Aten√ß√£o')) {
              
              doc.setFontSize(12);
              doc.setTextColor(245, 124, 0);
            } else {
              doc.setFontSize(10);
              doc.setTextColor(60, 60, 60);
            }
            
            // Quebrar linhas longas
            const splitText = doc.splitTextToSize(paragraph, 180);
            doc.text(splitText, 14, yPosition);
            yPosition += splitText.length * 6;
          }
          yPosition += 4;
        }
        
        yPosition += 10;
      });
      
      // Footer
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(150, 150, 150);
        doc.text(`ShoppeAI - An√°lise de Desempenho | P√°gina ${i} de ${pageCount}`, 14, 290);
      }
      
      // Salvar o PDF
      doc.save(`Analise_${clientName}_${date.replace(/\//g, '-')}.pdf`);
      
      toast({
        title: "PDF gerado com sucesso!",
        description: "O relat√≥rio foi salvo no seu dispositivo.",
        variant: "default",
      });
    } catch (error) {
      console.error("Erro ao gerar PDF:", error);
      toast({
        title: "Erro ao gerar PDF",
        description: "N√£o foi poss√≠vel gerar o arquivo PDF. Tente novamente.",
        variant: "destructive",
      });
    }
  };

  const handleSubmit = async () => {
    if (!selectedClientId) {
      toast({
        title: "Selecione um cliente",
        description: "√â necess√°rio selecionar um cliente para continuar",
        variant: "destructive",
      });
      return;
    }

    if (files.length === 0) {
      toast({
        title: "Selecione arquivos",
        description: "Fa√ßa upload de pelo menos um print para an√°lise",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsAnalyzing(true);

      const results = [];
      for (const file of files) {
        try {
          const base64Image = await convertImageToBase64(file);
          const analysisResult = await analyzeImageWithGemini(
            base64Image,
            analysisType
          );
          results.push({
            filename: file.name,
            analysis: analysisResult,
          });
        } catch (imageError: any) {
          console.error(`Erro ao analisar imagem ${file.name}:`, imageError);
          toast({
            title: `Erro ao analisar ${file.name}`,
            description: imageError.message || "Ocorreu um erro ao processar esta imagem",
            variant: "destructive",
          });
          // Continua com as pr√≥ximas imagens mesmo se uma falhar
        }
      }

      if (results.length === 0) {
        throw new Error("N√£o foi poss√≠vel analisar nenhuma das imagens selecionadas");
      }

      setAnalysisResults(results);

      const fileUrls = files.map((file) => URL.createObjectURL(file));
      const imageData = files.map((file, index) => ({
        file,
        url: URL.createObjectURL(file),
        filename: file.name,
        fileSize: file.size,
        mimeType: file.type
      }));

      try {
        // Salvar an√°lise na API
        const response = await fetch('/api/analises', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            clientId: selectedClientId,
            type: analysisType,
            results: results.map((result, index) => ({
              analysis: result.analysis,
              filename: result.filename,
              imageUrl: imageData[index]?.url || null
            })),
            imageUrls: imageData.map(img => img.url),
            title: `An√°lise de ${analysisType === 'account' ? 'Conta' : 'An√∫ncios'} - ${new Date().toLocaleDateString('pt-BR')}`
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error("Erro da API:", errorData);
          toast({
            title: "Erro ao salvar a an√°lise",
            description: errorData.error || "N√£o foi poss√≠vel salvar a an√°lise no banco de dados",
            variant: "destructive",
          });
          // Continua mesmo se falhar ao salvar no banco
        }
      } catch (apiError: any) {
        console.error("Erro ao chamar a API:", apiError);
        toast({
          title: "Erro ao salvar a an√°lise",
          description: "N√£o foi poss√≠vel conectar ao servidor. Os resultados ser√£o salvos localmente.",
          variant: "destructive",
        });
        // Continua mesmo se falhar ao salvar no banco
      }

      // Mant√©m a chamada ao mock de API para compatibilidade
      try {
        await generateReport({
          clientId: selectedClientId,
          type: analysisType,
          files: fileUrls,
        }).unwrap();
      } catch (mockError) {
        console.error("Erro ao gerar relat√≥rio mock:", mockError);
        // Continua mesmo se o mock falhar
      }

      // Armazenar no localStorage para recupera√ß√£o posterior
      localStorage.setItem(
        `analysis_${selectedClientId}_${Date.now()}`, 
        JSON.stringify(results)
      );

      // Gerar PDF automaticamente
      generatePDF(results);

      toast({
        title: "An√°lise conclu√≠da com sucesso!",
        description: "A an√°lise foi processada com IA e salva no hist√≥rico do cliente.",
        variant: "default",
      });

      // Redirecionar para a p√°gina de detalhes do cliente
      router.push(`/clientes/${selectedClientId}`);

      setFiles([]);
    } catch (error: any) {
      console.error("Erro completo:", error);
      toast({
        title: "Erro ao gerar relat√≥rio",
        description: error.message || "Ocorreu um erro ao processar as imagens. Por favor, tente novamente.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">An√°lise</h1>
        <p className="text-muted-foreground">
          Crie uma an√°lise para sua loja Shopee com IA
        </p>
      </div>

      {apiError && (
        <Card className="border-red-300 bg-red-50 dark:bg-red-950/30">
          <CardHeader className="pb-2">
            <CardTitle className="text-red-700 dark:text-red-400 flex items-center">
              <AlertCircle className="mr-2 h-5 w-5" />
              Erro na API do Gemini
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-red-700 dark:text-red-300">{apiError}</p>
            {apiError.includes("deprecated") && (
              <p className="text-sm mt-2 text-red-700 dark:text-red-300">
                Este erro indica que o modelo usado est√° obsoleto. Entre em contato com o administrador para atualizar o c√≥digo.
              </p>
            )}
          </CardContent>
          <CardFooter>
            <Button size="sm" variant="outline" className="flex items-center text-red-700 border-red-300" onClick={() => window.open("https://ai.google.dev/docs/gemini_api_updates", "_blank")}>
              Ver documenta√ß√£o do Gemini
              <ExternalLink className="ml-2 h-3.5 w-3.5" />
            </Button>
          </CardFooter>
        </Card>
      )}

      <div className="flex justify-between items-center">
        <p className="text-sm text-muted-foreground">
          Selecione um cliente e fa√ßa upload de capturas de tela para an√°lise autom√°tica com IA
        </p>
        <Button variant="outline" onClick={() => router.push('/clientes')}>
          Gerenciar Clientes
          <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </div>

      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>Selecione o Cliente</CardTitle>
          </CardHeader>
          <CardContent>
            <ClientSelector />
            {!selectedClientId && (
              <p className="text-xs text-amber-600 mt-2">
                * Selecione um cliente antes de prosseguir
              </p>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Tipo de An√°lise</CardTitle>
          </CardHeader>
          <CardContent>
            <AnalysisTypeSelector
              value={analysisType}
              onChange={setAnalysisType}
            />
            <p className="text-xs text-muted-foreground mt-2">
              {analysisType === "account" 
                ? "An√°lise de conta avalia o desempenho geral da loja, convers√£o, GMV e m√©tricas de desempenho"
                : "An√°lise de an√∫ncios avalia as campanhas publicit√°rias, ROAS, CTR e estrat√©gias de otimiza√ß√£o"}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>
              {analysisType === "account"
                ? "Upload de Prints da Conta"
                : "Upload de Prints dos An√∫ncios"}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <FileUpload
              onFilesChange={handleFileChange}
              maxFiles={10}
              accept="image/*"
            />
            <p className="text-xs text-muted-foreground mt-2">
              Fa√ßa upload de capturas de tela da sua loja Shopee para an√°lise detalhada com IA (m√°ximo 10 imagens)
            </p>
            {files.length > 0 && (
              <div className="mt-4">
                <p className="text-sm font-medium">Arquivos selecionados ({files.length}):</p>
                <ul className="mt-1 text-xs text-muted-foreground">
                  {files.map((file, index) => (
                    <li key={index}>{file.name}</li>
                  ))}
                </ul>
              </div>
            )}
          </CardContent>
        </Card>

        <div className="flex flex-col sm:flex-row gap-4">
          <Button
            onClick={handleSubmit}
            disabled={
              !selectedClientId ||
              files.length === 0 ||
              isLoading ||
              isAnalyzing
            }
            className="flex-1 bg-orange-600 hover:bg-orange-700 text-white"
          >
            <FileSpreadsheet className="mr-2 h-4 w-4" />
            {isLoading || isAnalyzing
              ? "Analisando com IA..."
              : "Gerar Relat√≥rio com IA"}
          </Button>
          
          {analysisResults.length > 0 && (
            <Button 
              onClick={() => generatePDF(analysisResults)}
              variant="outline"
              className="flex-none"
            >
              <Download className="mr-2 h-4 w-4" />
              Baixar PDF
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}
