"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FileSpreadsheet } from "lucide-react";
import { ClientSelector } from "@/components/client/client-selector";
import { AnalysisTypeSelector } from "@/components/analysis/analysis-type-selector";
import { FileUpload } from "@/components/analysis/file-upload";
import { ClientForm } from "@/components/client/client-form";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useSelector } from "react-redux";
import { selectSelectedClientId } from "@/features/clients/clientSlice";
import { useGenerateReportMutation } from "@/lib/api";
import { toast } from "sonner";
import { AnalysisType } from "@/types";


const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// Prompt avan√ßado para an√°lise de conta Shopee
const ADVANCED_ACCOUNT_PROMPT = `Voc√™ √© um consultor de marketplace de alt√≠ssimo n√≠vel, com Doutorado em Vendas e SEO de Marketplace, e PhD em An√°lise de Dados para E-commerce. Sua fun√ß√£o √© gerar relat√≥rios altamente estrat√©gicos, detalhados e orientados a desempenho com base em dados da plataforma Shopee.

Analise esta captura de tela da loja Shopee e extraia as seguintes informa√ß√µes: nome da loja, n√∫mero de seguidores, classifica√ß√£o, data de registro, n√∫mero de produtos, taxa de resposta.

Com base nesses dados, gere um relat√≥rio completo no seguinte formato:

üìä RELAT√ìRIO DE AN√ÅLISE DE CONTA ‚Äì SHOPEE
Loja: [NOME DA LOJA]
Per√≠odo Analisado: √öltimo m√™s (comparativo m√™s anterior)
Objetivo: Diagn√≥stico completo e orienta√ß√µes estrat√©gicas para crescimento sustent√°vel e aumento de vendas.

1. Vis√£o Geral do Desempenho
Breve descri√ß√£o geral do cen√°rio atual da conta com base nos dados globais, destacando se o funil √© saud√°vel ou em queda de produtos e se h√° depend√™ncia de poucos para sustentar o GMV.

2. An√°lise dos KPIs (Indicadores-Chave de Desempenho)
2.1. Vendas (GMV)
Vendas Totais (GMV)
Vendas Pagas
Varia√ß√£o em rela√ß√£o ao m√™s anterior
Recomenda√ß√µes Estrat√©gicas

2.2. Pedidos
Pedidos Feitos
Pedidos Pagos
Itens Pagos
Recomenda√ß√µes Estrat√©gicas

2.3. Pedidos Cancelados
(Caso n√£o informado, an√°lise inferencial)
Recomenda√ß√µes Estrat√©gicas

2.4. Taxa de Convers√£o
Taxa de Convers√£o (Visitados ‚ûû Confirmados)
Taxa de Convers√£o (Pagos)
Recomenda√ß√µes Estrat√©gicas

2.5. Visitantes
Visitantes √önicos
Varia√ß√£o
Recomenda√ß√µes Estrat√©gicas

3. An√°lise de Tend√™ncias
3.1. Tend√™ncia Geral
3.2. Distribui√ß√£o Temporal
Recomenda√ß√µes Estrat√©gicas

4. An√°lise de Campanhas de An√∫ncios (Shopee Ads)
4.1. Impress√µes e Cliques
4.2. CTR (Taxa de Cliques)
4.3. Investimento e ROAS
Recomenda√ß√µes Estrat√©gicas

5. An√°lise de Produtos
5.1. Ranking de Produtos por Visitantes
5.2. Ranking de Produtos por Visualiza√ß√µes da P√°gina
Ranking por Compras (Produto Pago)
Ranking por Taxa de Convers√£o
Ranking por Adi√ß√µes ao Carrinho
Recomenda√ß√µes Estrat√©gicas

‚úÖ Pontos Positivos
Lista com no m√≠nimo 3 aspectos positivos obtidos nos dados da conta.

‚ö†Ô∏è Pontos de Aten√ß√£o
Lista com no m√≠nimo 3 riscos, quedas ou fragilidades cr√≠ticas que precisam ser atacadas.

üìå Considera√ß√µes Finais
Observa√ß√µes t√©cnicas ou estrat√©gias complementares conforme leitura da conta.

üìà RELAT√ìRIO DE PROJE√á√ÉO DE CRESCIMENTO ‚Äì PR√ìXIMOS 30 DIAS
Elabore a proje√ß√£o detalhada da conta com base nos dados analisados.

üìê PLANO T√ÅTICO COMPLETO - 30 DIAS
Crie um plano t√°tico completo, com dura√ß√£o de 30 dias, dividido por dias (do 1 ao 30) e semanas (1 a 4) com foco em a√ß√µes pr√°ticas, organizadas por prioridade e alinhadas √†s diretrizes da Shopee.`;

// Prompt avan√ßado para an√°lise de an√∫ncios Shopee
const ADVANCED_ADS_PROMPT = `Voc√™ √© um consultor de marketplace especializado em an√∫ncios para e-commerce, com vasta experi√™ncia em otimiza√ß√£o de campanhas na Shopee.

Analise esta captura de tela de an√∫ncios da Shopee e extraia as seguintes informa√ß√µes: nome do produto, pre√ßo, taxa de convers√£o, n√∫mero de visualiza√ß√µes, n√∫mero de cliques.

Com base nesses dados, forne√ßa uma an√°lise detalhada dos an√∫ncios incluindo:

1. Desempenho Geral
- An√°lise do ROAS (Retorno sobre Investimento em An√∫ncios)
- CTR (Taxa de Cliques) comparada ao benchmark da plataforma
- Convers√£o dos an√∫ncios para vendas

2. Otimiza√ß√£o de Campanhas
- Recomenda√ß√µes para ajustes de lance
- Estrat√©gia de palavras-chave
- Melhorias na segmenta√ß√£o

3. Formatos de An√∫ncios Recomendados
- An√∫ncios de Descoberta
- An√∫ncio de Busca
- An√∫ncio de Busca de Loja
- An√∫ncio GMVMAX Lance Autom√°tico
- An√∫ncio GMVMAX Meta de ROAS

4. Plano de A√ß√£o para 30 dias
- Semana 1: A√ß√µes imediatas
- Semana 2: Otimiza√ß√µes de meio per√≠odo
- Semana 3-4: Estrat√©gia de escala

5. Proje√ß√£o de Resultados
- Cen√°rio conservador
- Cen√°rio realista
- Cen√°rio agressivo

Inclua m√©tricas objetivas e recomenda√ß√µes pr√°ticas que possam ser implementadas imediatamente.`;

export default function AnalisePage() {
  const [analysisType, setAnalysisType] = useState<AnalysisType>("account");
  const [files, setFiles] = useState<File[]>([]);
  const selectedClientId = useSelector(selectSelectedClientId);
  const [generateReport, { isLoading }] = useGenerateReportMutation();
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const handleFileChange = (newFiles: File[]) => {
    setFiles(newFiles);
  };

  const convertImageToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const base64String = reader.result as string;

        const base64Content = base64String.split(",")[1];
        resolve(base64Content);
      };
      reader.onerror = (error) => reject(error);
    });
  };

  const analyzeImageWithGemini = async (
    base64Image: string,
    type: AnalysisType
  ) => {
    try {
      const prompt = type === "account" ? ADVANCED_ACCOUNT_PROMPT : ADVANCED_ADS_PROMPT;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  { text: prompt },
                  {
                    inline_data: {
                      mime_type: "image/jpeg",
                      data: base64Image,
                    },
                  },
                ],
              },
            ],
            generation_config: {
              temperature: 0.4,
              max_output_tokens: 4096,
            },
          }),
        }
      );

      const data = await response.json();
      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      console.error("Erro ao analisar imagem com Gemini:", error);
      throw error;
    }
  };

  const handleSubmit = async () => {
    if (!selectedClientId) {
      toast.error("Selecione um cliente para continuar");
      return;
    }

    if (files.length === 0) {
      toast.error("Fa√ßa upload de pelo menos um print para an√°lise");
      return;
    }

    try {
      setIsAnalyzing(true);

      const analysisResults = [];
      for (const file of files) {
        const base64Image = await convertImageToBase64(file);
        const analysisResult = await analyzeImageWithGemini(
          base64Image,
          analysisType
        );
        analysisResults.push({
          filename: file.name,
          analysis: analysisResult,
        });
      }

      const fileUrls = files.map((file) => URL.createObjectURL(file));

      const result = await generateReport({
        clientId: selectedClientId,
        type: analysisType,
        files: fileUrls,
      }).unwrap();

      // Armazene os resultados da an√°lise em localStorage para recupera√ß√£o posterior
      localStorage.setItem(`analysis_${selectedClientId}_${Date.now()}`, JSON.stringify(analysisResults));

      toast.success("Relat√≥rio gerado com sucesso!", {
        description:
          "A an√°lise foi processada com IA e o relat√≥rio est√° dispon√≠vel para download.",
      });

      setFiles([]);
    } catch (error) {
      console.error("Erro completo:", error);
      toast.error("Erro ao gerar relat√≥rio", {
        description:
          "Ocorreu um erro ao processar as imagens. Por favor, tente novamente.",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">An√°lise</h1>
        <p className="text-muted-foreground">
          Crie uma an√°lise para sua loja Shopee com IA
        </p>
      </div>

      <Tabs defaultValue="analysis">
        <TabsList className="grid w-full md:w-[400px] grid-cols-2">
          <TabsTrigger value="analysis">Realizar An√°lise</TabsTrigger>
          <TabsTrigger value="register">Cadastrar Cliente</TabsTrigger>
        </TabsList>

        <TabsContent value="analysis" className="space-y-6 mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Selecione o Cliente</CardTitle>
            </CardHeader>
            <CardContent>
              <ClientSelector />
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Tipo de An√°lise</CardTitle>
            </CardHeader>
            <CardContent>
              <AnalysisTypeSelector
                value={analysisType}
                onChange={setAnalysisType}
              />
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>
                {analysisType === "account"
                  ? "Upload de Prints da Conta"
                  : "Upload de Prints dos An√∫ncios"}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <FileUpload
                onFilesChange={handleFileChange}
                maxFiles={5}
                accept="image/*"
              />
              <p className="text-xs text-muted-foreground mt-2">
                Fa√ßa upload de capturas de tela da sua loja Shopee para an√°lise
                com IA
              </p>
            </CardContent>
          </Card>

          <Button
            onClick={handleSubmit}
            disabled={
              !selectedClientId ||
              files.length === 0 ||
              isLoading ||
              isAnalyzing
            }
            className="w-full md:w-auto bg-orange-600 hover:bg-orange-700 text-white"
          >
            <FileSpreadsheet className="mr-2 h-4 w-4" />
            {isLoading || isAnalyzing
              ? "Analisando com IA..."
              : "Gerar Relat√≥rio com IA"}
          </Button>
        </TabsContent>

        <TabsContent value="register" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Cadastrar Novo Cliente</CardTitle>
            </CardHeader>
            <CardContent>
              <ClientForm />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
